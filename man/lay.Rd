% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lay.R
\name{lay}
\alias{lay}
\title{lay down}
\usage{
lay(.data, fn)
}
\arguments{
\item{.data}{A tibble}

\item{fn}{A function to apply to each row of \code{.data}. May also be a formula, see \code{\link[rlang:as_function]{rlang::as_function()}}.}
}
\description{
lay down
}
\details{
\itemize{
\item each row of \code{.data} is materialized into a vector via \code{\link[vctrs:vec_c]{vctrs::vec_c()}}
\item \code{fn} is applied to that vector
\item All results are finally combined together with \code{\link[vctrs:vec_c]{vctrs::vec_c()}}
}
}
\examples{
if (require("dplyr")) {

  # for printing
  iris <- as_tibble(iris)

  # apply mean for each row
  iris \%>\%
    mutate(sepal = lay(across(starts_with("Sepal")), mean))

  # not that useful because there is `rowMeans` already
  iris \%>\%
    mutate(sepal = rowMeans(across(starts_with("Sepal"))))

  # but then we can lay other functions, e.g. median
  iris \%>\%
    mutate(sepal = lay(across(starts_with("Sepal")), median))

  # or lay into a tibble if you want multiple results
  iris \%>\%
    mutate(sepal = lay(
      across(starts_with("Sepal")),
      ~tibble(min = min(.), mean = mean(.), max = max(.))
    ))

  # and if you skip `sepal =` things get auto spliced for you
  iris \%>\%
    mutate(lay(
      across(starts_with("Sepal")),
      ~tibble(min = min(.), mean = mean(.), max = max(.))
    ))
}

}
