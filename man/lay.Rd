% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lay.R
\name{lay}
\alias{lay}
\title{Apply a function (or functions) within rows.}
\usage{
lay(.data, .fn, ..., .method = "apply")
}
\arguments{
\item{.data}{A data frame or data frame extension (e.g. a tibble).}

\item{.fn}{A function to apply to each row of \code{.data}. May also be a formula, see \code{\link[rlang:as_function]{rlang::as_function()}}. Should return a scalar or a list.}

\item{...}{Additional arguments for the function calls in \code{fn}.}

\item{.method}{This is an experimental argument that allows you to control which internal method is used to apply the rowwise job:
\itemize{
\item "apply", the default internally uses the function \code{\link[=apply]{apply()}}.
\item "tidy", internally uses \code{\link[purrr:map2]{purrr::pmap()}}.
}

The default has been chosen based on benchmarks provided in the vignette (to come).}
}
\description{
\code{lay()} create a vector by considering in turns each row of a data.frame or tibble as the vector input of some function(s).
This makes it easy to create new columns based on a rowwise operation (see \emph{Examples}, below, for illustrations).
}
\examples{


if (require("dplyr")) {

  # for printing
  iris <- as_tibble(iris)

  # apply mean for each row
  iris \%>\%
    mutate(Sepal.Mean = lay(across(starts_with("Sepal")), mean))

  # not that useful because there is `rowMeans` already
  iris \%>\%
    mutate(Sepal.Mean = rowMeans(across(starts_with("Sepal"))))

  # but then we can lay other functions, e.g. median
  iris \%>\%
    mutate(Sepal.Median = lay(across(starts_with("Sepal")), median))

  # you can pass arguments to the function
  iris_with_NA <- iris
  iris_with_NA[1, 1] <- NA
  iris_with_NA \%>\%
    mutate(Sepal.Mean = lay(across(starts_with("Sepal")), mean))
  iris_with_NA \%>\%
    mutate(Sepal.Mean = lay(across(starts_with("Sepal")), mean, na.rm = TRUE))

  # you can also lay into a tibble if you want multiple results
  iris \%>\%
    mutate(Sepal.Mean = lay(
      across(starts_with("Sepal")),
      ~ tibble(min = min(.x), mean = mean(.x), max = max(.x))
    ))

  # the previous example creates a df-column called `Sepal.Mean`,
  # which you could unpack with `tidyr::unpack()`, but
  # if you skip `Sepal.Mean =` things get auto spliced for you!
  iris \%>\%
    mutate(lay(
      across(starts_with("Sepal")),
      ~ tibble(min = min(.x), mean = mean(.x), max = max(.x))
    ))

  # if your function returns a vector and not a scalar,
  # just wrap it up in list (note also the use of the lambda syntax ~ fn(.x) here)
  iris \%>\%
    mutate(Sepal.Quantiles = lay(across(starts_with("Sepal")), ~ list(quantile(.x))))

  # the previous example creates a list-column called `Sepal.Quantiles`,
  # which you could unnest with `tidyr::unnest_wider()`, but
  # you can once again rely on a tibble and skip the column name to get the output
  # auto spliced for you!
  iris \%>\%
    mutate(lay(across(starts_with("Sepal")), ~ as_tibble_row(quantile(.x))))
}

}
