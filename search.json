[{"path":[]},{"path":"https://courtiol.github.io/lay/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://courtiol.github.io/lay/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://courtiol.github.io/lay/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://courtiol.github.io/lay/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://courtiol.github.io/lay/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://courtiol.github.io/lay/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://courtiol.github.io/lay/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://courtiol.github.io/lay/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://courtiol.github.io/lay/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://courtiol.github.io/lay/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://courtiol.github.io/lay/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://courtiol.github.io/lay/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to lay","title":"Contributing to lay","text":"outlines propose change lay. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://courtiol.github.io/lay/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to lay","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://courtiol.github.io/lay/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to lay","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://courtiol.github.io/lay/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to lay","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"courtiol/lay\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://courtiol.github.io/lay/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to lay","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://courtiol.github.io/lay/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to lay","text":"Please note lay project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://courtiol.github.io/lay/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Romain François Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://courtiol.github.io/lay/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with lay","title":"Getting help with lay","text":"Thanks using lay! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://courtiol.github.io/lay/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with lay","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://courtiol.github.io/lay/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with lay","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://courtiol.github.io/lay/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with lay","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"article-overview","dir":"Articles","previous_headings":"","what":"Article overview","title":"Alternatives for rowwise jobs","text":"many alternatives perform rowwise jobs R. Article, consider, turns, alternatives. stick example drugs usage shown introduction. idea compare alternative ways create new variable named everused indicates respondent used considered pain relievers non medical purpose .","code":""},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading packages","title":"Alternatives for rowwise jobs","text":"Article requires load following packages: Please install present system.","code":"library(lay)        ## for lay() and the data library(dplyr)      ## for many things library(tidyr)      ## for pivot_longer() and pivot_wider() library(purrr)      ## for pmap_lgl() library(slider)     ## for slide() library(data.table) ## for an alternative to base and dplyr"},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"alternative-1-vectorized-solution","dir":"Articles","previous_headings":"","what":"Alternative 1: vectorized solution","title":"Alternatives for rowwise jobs","text":"One solution simply following: certainly efficient computational point view, coding way presents two main limitations: need name columns explicitly, can problematic dealing many columns stuck expressing task logical arithmetic operators, always sufficient","code":"drugs_full |>   mutate(everused = codeine | hydrocd | methdon | morphin | oxycodp | tramadl | vicolor) #> # A tibble: 55,271 × 9 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #>  1 1            0       0       0       0       0       0       0 FALSE    #>  2 2            0       0       0       0       0       0       0 FALSE    #>  3 3            0       0       0       0       0       0       0 FALSE    #>  4 4            0       0       0       0       0       0       0 FALSE    #>  5 5            0       0       0       0       0       0       0 FALSE    #>  6 6            0       0       0       0       0       0       0 FALSE    #>  7 7            0       0       0       0       0       0       0 FALSE    #>  8 8            0       0       0       0       0       0       0 FALSE    #>  9 9            0       0       0       0       0       0       1 TRUE     #> 10 10           0       0       0       0       0       0       0 FALSE    #> # ℹ 55,261 more rows"},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"alternative-2-100-dplyr","dir":"Articles","previous_headings":"","what":"Alternative 2: 100% {dplyr}","title":"Alternatives for rowwise jobs","text":"easy use c_across() turns input vector rowwise() implies vector represents one row time. Yet, now remains quite slow large datasets (see Efficiency ).","code":"drugs |>   rowwise() |>   mutate(everused = any(c_across(-caseid))) |>   ungroup() #> # A tibble: 100 × 9 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #>  1 1            0       0       0       0       0       0       0 FALSE    #>  2 2            0       0       0       0       0       0       0 FALSE    #>  3 3            0       0       0       0       0       0       0 FALSE    #>  4 4            0       0       0       0       0       0       0 FALSE    #>  5 5            0       0       0       0       0       0       0 FALSE    #>  6 6            0       0       0       0       0       0       0 FALSE    #>  7 7            0       0       0       0       0       0       0 FALSE    #>  8 8            0       0       0       0       0       0       0 FALSE    #>  9 9            0       0       0       0       0       0       1 TRUE     #> 10 10           0       0       0       0       0       0       0 FALSE    #> # ℹ 90 more rows"},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"alternative-3-tidyr","dir":"Articles","previous_headings":"","what":"Alternative 3: {tidyr}","title":"Alternatives for rowwise jobs","text":"trick turn rowwise problem column problem pivoting values pivoting results back. Many find involves little much intellectual gymnastic. also particularly efficient large dataset terms computation time memory required pivot tables.","code":"library(tidyr)  ## requires to have installed {tidyr}  drugs |>   pivot_longer(-caseid) |>   group_by(caseid) |>   mutate(everused = any(value)) |>   ungroup() |>   pivot_wider() |>   relocate(everused, .after = last_col()) #> # A tibble: 100 × 9 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #>  1 1            0       0       0       0       0       0       0 FALSE    #>  2 2            0       0       0       0       0       0       0 FALSE    #>  3 3            0       0       0       0       0       0       0 FALSE    #>  4 4            0       0       0       0       0       0       0 FALSE    #>  5 5            0       0       0       0       0       0       0 FALSE    #>  6 6            0       0       0       0       0       0       0 FALSE    #>  7 7            0       0       0       0       0       0       0 FALSE    #>  8 8            0       0       0       0       0       0       0 FALSE    #>  9 9            0       0       0       0       0       0       1 TRUE     #> 10 10           0       0       0       0       0       0       0 FALSE    #> # ℹ 90 more rows"},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"alternative-4-purrr","dir":"Articles","previous_headings":"","what":"Alternative 4: {purrr}","title":"Alternatives for rowwise jobs","text":"perfectly fine solution actually part one implementation lay() relies (.method = \"tidy\"), user perspective little geeky-scary.","code":"library(purrr)  ## requires to have installed {purrr}  drugs |>   mutate(everused = pmap_lgl(pick(-caseid), ~ any(...))) #> # A tibble: 100 × 9 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #>  1 1            0       0       0       0       0       0       0 FALSE    #>  2 2            0       0       0       0       0       0       0 FALSE    #>  3 3            0       0       0       0       0       0       0 FALSE    #>  4 4            0       0       0       0       0       0       0 FALSE    #>  5 5            0       0       0       0       0       0       0 FALSE    #>  6 6            0       0       0       0       0       0       0 FALSE    #>  7 7            0       0       0       0       0       0       0 FALSE    #>  8 8            0       0       0       0       0       0       0 FALSE    #>  9 9            0       0       0       0       0       0       1 TRUE     #> 10 10           0       0       0       0       0       0       0 FALSE    #> # ℹ 90 more rows"},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"alternative-5-slider","dir":"Articles","previous_headings":"","what":"Alternative 5: {slider}","title":"Alternatives for rowwise jobs","text":"package {slider} powerful package provides several sliding window functions. can used perform rowwise operations quite similar {lay} terms syntax. however efficient {lay} sure supports automatic splicing demonstrated .","code":"library(slider)   ## requires to have installed {slider}  drugs |>   mutate(everused = slide_vec(pick(-caseid), any)) #> # A tibble: 100 × 9 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #>  1 1            0       0       0       0       0       0       0 FALSE    #>  2 2            0       0       0       0       0       0       0 FALSE    #>  3 3            0       0       0       0       0       0       0 FALSE    #>  4 4            0       0       0       0       0       0       0 FALSE    #>  5 5            0       0       0       0       0       0       0 FALSE    #>  6 6            0       0       0       0       0       0       0 FALSE    #>  7 7            0       0       0       0       0       0       0 FALSE    #>  8 8            0       0       0       0       0       0       0 FALSE    #>  9 9            0       0       0       0       0       0       1 TRUE     #> 10 10           0       0       0       0       0       0       0 FALSE    #> # ℹ 90 more rows"},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"alternative-6-data-table","dir":"Articles","previous_headings":"","what":"Alternative 6: {data.table}","title":"Alternatives for rowwise jobs","text":"solution using {data.table}. particularly efficient, particularly easy remember program frequently using {data.table}.","code":"library(data.table)  ## requires to have installed {data.table}  drugs_dt <- data.table(drugs)  drugs_dt[, ..I := .I] drugs_dt[, everused := any(.SD), by = ..I, .SDcols = -\"caseid\"] drugs_dt[, ..I := NULL] as_tibble(drugs_dt) #> # A tibble: 100 × 9 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #>  1 1            0       0       0       0       0       0       0 FALSE    #>  2 2            0       0       0       0       0       0       0 FALSE    #>  3 3            0       0       0       0       0       0       0 FALSE    #>  4 4            0       0       0       0       0       0       0 FALSE    #>  5 5            0       0       0       0       0       0       0 FALSE    #>  6 6            0       0       0       0       0       0       0 FALSE    #>  7 7            0       0       0       0       0       0       0 FALSE    #>  8 8            0       0       0       0       0       0       0 FALSE    #>  9 9            0       0       0       0       0       0       1 TRUE     #> 10 10           0       0       0       0       0       0       0 FALSE    #> # ℹ 90 more rows"},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"alternative-7-apply","dir":"Articles","previous_headings":"","what":"Alternative 7: apply()","title":"Alternatives for rowwise jobs","text":"base R solution. efficient actually part default method used lay(). implementation lay() strips need defining margin (1L ) benefits automatic splicing lambda syntax shown .","code":"drugs |>   mutate(everused = apply(pick(-caseid), 1L, any)) #> # A tibble: 100 × 9 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #>  1 1            0       0       0       0       0       0       0 FALSE    #>  2 2            0       0       0       0       0       0       0 FALSE    #>  3 3            0       0       0       0       0       0       0 FALSE    #>  4 4            0       0       0       0       0       0       0 FALSE    #>  5 5            0       0       0       0       0       0       0 FALSE    #>  6 6            0       0       0       0       0       0       0 FALSE    #>  7 7            0       0       0       0       0       0       0 FALSE    #>  8 8            0       0       0       0       0       0       0 FALSE    #>  9 9            0       0       0       0       0       0       1 TRUE     #> 10 10           0       0       0       0       0       0       0 FALSE    #> # ℹ 90 more rows"},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"alternative-8-for-i-in--------","dir":"Articles","previous_headings":"","what":"Alternative 8: for (i in ...) {...}","title":"Alternatives for rowwise jobs","text":"another base R solution, involve external package. pretty, particularly efficient.","code":"drugs$everused <- NA  columns_in <- !colnames(drugs) %in% c(\"caseid\", \"everused\")  for (i in seq_len(nrow(drugs))) {   drugs$everused[i] <- any(drugs[i, columns_in]) }  drugs #> # A tibble: 100 × 9 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #>  1 1            0       0       0       0       0       0       0 FALSE    #>  2 2            0       0       0       0       0       0       0 FALSE    #>  3 3            0       0       0       0       0       0       0 FALSE    #>  4 4            0       0       0       0       0       0       0 FALSE    #>  5 5            0       0       0       0       0       0       0 FALSE    #>  6 6            0       0       0       0       0       0       0 FALSE    #>  7 7            0       0       0       0       0       0       0 FALSE    #>  8 8            0       0       0       0       0       0       0 FALSE    #>  9 9            0       0       0       0       0       0       1 TRUE     #> 10 10           0       0       0       0       0       0       0 FALSE    #> # ℹ 90 more rows"},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"other-alternatives","dir":"Articles","previous_headings":"","what":"Other alternatives?","title":"Alternatives for rowwise jobs","text":"probably ways. think nice one, please leave issue add !","code":""},{"path":"https://courtiol.github.io/lay/articles/alternatives.html","id":"efficiency","dir":"Articles","previous_headings":"","what":"Efficiency","title":"Alternatives for rowwise jobs","text":"results benchmarks comparing alternative implementations simple rowwise job shown another Article (see benchmarks). see, lay() just simple powerful, also quite efficient!","code":""},{"path":"https://courtiol.github.io/lay/articles/benchmarks.html","id":"article-overview","dir":"Articles","previous_headings":"","what":"Article overview","title":"Benchmarks","text":"goal Article compare performances lay() alternatives described . see, code using lay() quite efficient. alternative clearly efficient one labeled “vectorized”. Unfortunately, vectorized approach imply refer explicitly column names data used. Furthermore, vectorized approach applicable generally, can deal logical arithmetic operators allow use types functions.","code":""},{"path":"https://courtiol.github.io/lay/articles/benchmarks.html","id":"loading-packages","dir":"Articles","previous_headings":"","what":"Loading packages","title":"Benchmarks","text":"Article requires load following packages: Please install present system.","code":"library(lay)        ## for lay() and the data library(dplyr)      ## for many things library(tidyr)      ## for pivot_longer() and pivot_wider() library(purrr)      ## for pmap_lgl() library(slider)     ## for slide() library(data.table) ## for an alternative to base and dplyr library(bench)      ## for running the benchmarks library(forcats)    ## for sorting levels in plot with fct_reorder()"},{"path":"https://courtiol.github.io/lay/articles/benchmarks.html","id":"an-example-of-a-rowwise-task","dir":"Articles","previous_headings":"","what":"An example of a rowwise task","title":"Benchmarks","text":"Consider dataset drugs_full package {lay}: dataset, columns caseid record use pain relievers non medical purpose. drug certain number users non-users: Article, compare efficiency alternative ways create new variable named everused indicates respondent used considered pain relievers non medical purpose . run benchmarks dataset drugs_full 55271 rows, well subset data called drugs contains 100 rows.","code":"drugs_full #> # A tibble: 55,271 × 8 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> #>  1 1            0       0       0       0       0       0       0 #>  2 2            0       0       0       0       0       0       0 #>  3 3            0       0       0       0       0       0       0 #>  4 4            0       0       0       0       0       0       0 #>  5 5            0       0       0       0       0       0       0 #>  6 6            0       0       0       0       0       0       0 #>  7 7            0       0       0       0       0       0       0 #>  8 8            0       0       0       0       0       0       0 #>  9 9            0       0       0       0       0       0       1 #> 10 10           0       0       0       0       0       0       0 #> # ℹ 55,261 more rows drugs_full |>   pivot_longer(-caseid, names_to = \"drug\", values_to = \"used\") |>   count(drug, used) |>   mutate(used = if_else(used == 1, \"have_used\", \"have_not_used\")) |>   pivot_wider(names_from = used, values_from = n) #> # A tibble: 7 × 3 #>   drug    have_not_used have_used #>   <chr>           <int>     <int> #> 1 codeine         53642      1629 #> 2 hydrocd         52633      2638 #> 3 methdon         54685       586 #> 4 morphin         54326       945 #> 5 oxycodp         51461      3810 #> 6 tramadl         54480       791 #> 7 vicolor         50358      4913"},{"path":"https://courtiol.github.io/lay/articles/benchmarks.html","id":"benchmarks-on-the-full-dataset-55271-rows","dir":"Articles","previous_headings":"","what":"Benchmarks on the full dataset (55271 rows)","title":"Benchmarks","text":"Let’s compare running time different methods job full dataset: results first series benchmarks:  Note x-axis plot logarithmic scale.","code":"drugs_full_dt <- data.table(drugs_full) ## coercion to data.table  benchmark1 <- mark(   vectorized = {     drugs_full |>       mutate(everused = codeine | hydrocd | methdon | morphin | oxycodp | tramadl | vicolor)},   lay = {     drugs_full |>       select(-caseid) |>       mutate(everused = lay(pick(everything()), any))},   lay_alternative = {     drugs_full |>       mutate(everused = lay(pick(-caseid), any, .method = \"tidy\"))},   c_across = {     drugs_full |>       rowwise() |>       mutate(everused = any(c_across(-caseid))) |>       ungroup()},   pivot_pivot = {     drugs_full |>       pivot_longer(-caseid) |>       group_by(caseid) |>       mutate(everused = any(value)) |>       ungroup() |>       pivot_wider()},   pmap = {     drugs_full |>       mutate(everused = pmap_lgl(pick(-caseid), ~ any(...)))},   slider = {     drugs_full |>       mutate(everused = slide_vec(pick(-caseid), any))},   data.table = {     drugs_full_dt[, ..I := .I]     drugs_full_dt[, everused := any(.SD), by = ..I, .SDcols = -\"caseid\"]},   apply = {     drugs_full |>       mutate(everused = apply(pick(-caseid), 1, any))},   'for' = {     everused <- logical(nrow(drugs_full))     columns_in <- colnames(drugs_full) != \"caseid\"     for (i in seq_len(nrow(drugs_full))) everused[i] <- any(drugs_full[i, columns_in])},   iterations = 5,   time_unit = \"ms\",   check = FALSE   ) #> Warning: Some expressions had a GC in every iteration; so filtering is #> disabled. benchmark1 |>   arrange(median) #> # A tibble: 10 × 6 #>    expression           min   median `itr/sec` mem_alloc `gc/sec` #>    <bch:expr>         <dbl>    <dbl>     <dbl> <bch:byt>    <dbl> #>  1 vectorized          2.60     2.63  364.        2.74MB     0    #>  2 apply              95.9     97.6    10.2       4.01MB     4.08 #>  3 lay               120.     122.      7.95      5.49MB     1.59 #>  4 pivot_pivot       260.     263.      3.77     62.38MB     1.51 #>  5 pmap              316.     319.      3.11    251.29KB     2.49 #>  6 lay_alternative  1355.    1379.      0.729     15.3MB     1.90 #>  7 data.table       3373.    3380.      0.287     3.04MB     2.53 #>  8 slider           3962.    3977.      0.251   915.15KB     2.40 #>  9 for              7815.    7868.      0.126   271.73KB     2.60 #> 10 c_across        79215.   81526.      0.0123  424.32MB     1.08 benchmark1 |>   mutate(expression = fct_reorder(as.character(expression), median, .desc = TRUE)) |>   plot()"},{"path":"https://courtiol.github.io/lay/articles/benchmarks.html","id":"benchmarks-on-a-subset-of-the-data-100-rows","dir":"Articles","previous_headings":"","what":"Benchmarks on a subset of the data (100 rows)","title":"Benchmarks","text":"Let’s repeat benchmarks using subset original dataset: results second series benchmarks:  Note x-axis plot logarithmic scale.","code":"drugs_dt <- data.table(drugs) ## coercion to data.table  benchmark2 <- mark(   vectorized = {     drugs |>       mutate(everused = codeine | hydrocd | methdon | morphin | oxycodp | tramadl | vicolor)},   lay = {     drugs |>       select(-caseid) |>       mutate(everused = lay(pick(everything()), any))},   lay_alternative = {     drugs |>       mutate(everused = lay(pick(-caseid), any, .method = \"tidy\"))},   c_across = {     drugs |>       rowwise() |>       mutate(everused = any(c_across(-caseid))) |>       ungroup()},   pivot_pivot = {     drugs |>       pivot_longer(-caseid) |>       group_by(caseid) |>       mutate(everused = any(value)) |>       ungroup() |>       pivot_wider()},   pmap = {     drugs |>       mutate(everused = pmap_lgl(pick(-caseid), ~ any(...)))},   slider = {     drugs |>       mutate(everused = slide_vec(pick(-caseid), any))},   data.table = {     drugs_dt[, ..I := .I]     drugs_dt[, everused := any(.SD), by = ..I, .SDcols = -\"caseid\"]},   apply = {     drugs |>       mutate(everused = apply(pick(-caseid), 1, any))},   'for' = {     everused <- logical(nrow(drugs))     columns_in <- colnames(drugs) != \"caseid\"     for (i in seq_len(nrow(drugs))) everused[i] <- any(drugs[i, columns_in])},   iterations = 30,   time_unit = \"ms\",   check = FALSE   ) benchmark2 |>   arrange(median) #> # A tibble: 10 × 6 #>    expression         min median `itr/sec` mem_alloc `gc/sec` #>    <bch:expr>       <dbl>  <dbl>     <dbl> <bch:byt>    <dbl> #>  1 vectorized        1.07   1.08    915.      7.33KB     0    #>  2 apply             2.70   2.83    352.     16.92KB    12.1  #>  3 pmap              3.27   3.33    299.      9.91KB     0    #>  4 lay               4.70   4.78    208.     27.12KB     0    #>  5 lay_alternative   4.89   5.08    198.     38.05KB     6.83 #>  6 data.table        6.90   6.97    143.     67.66KB     0    #>  7 slider            9.29   9.94    101.     11.18KB     3.47 #>  8 for              16.4   17.3      57.8    17.74KB     1.99 #>  9 pivot_pivot      17.1   17.7      56.8   189.23KB     1.96 #> 10 c_across        135.   137.        7.30  794.53KB     2.22 benchmark2 |>   mutate(expression = fct_reorder(as.character(expression), median, .desc = TRUE)) |>   plot(type = \"violin\")"},{"path":"https://courtiol.github.io/lay/articles/benchmarks.html","id":"benchmarks-environment","dir":"Articles","previous_headings":"","what":"Benchmarks’ environment","title":"Benchmarks","text":"","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] forcats_1.0.0     bench_1.1.3       data.table_1.14.8 slider_0.3.1      #> [5] purrr_1.0.2       tidyr_1.3.0       dplyr_1.1.3       lay_0.1.1         #>  #> loaded via a namespace (and not attached): #>  [1] sass_0.4.7        utf8_1.2.4        generics_0.1.3    stringi_1.7.12    #>  [5] digest_0.6.33     magrittr_2.0.3    evaluate_0.22     grid_4.3.1        #>  [9] fastmap_1.1.1     rprojroot_2.0.3   jsonlite_1.8.7    fansi_1.0.5       #> [13] scales_1.2.1      textshaping_0.3.7 jquerylib_0.1.4   cli_3.6.1         #> [17] rlang_1.1.1       munsell_0.5.0     withr_2.5.1       cachem_1.0.8      #> [21] yaml_2.3.7        ggbeeswarm_0.7.2  tools_4.3.1       memoise_2.0.1     #> [25] colorspace_2.1-0  ggplot2_3.4.4     profmem_0.6.0     vctrs_0.6.4       #> [29] R6_2.5.1          lifecycle_1.0.3   stringr_1.5.0     fs_1.6.3          #> [33] vipor_0.4.5       ragg_1.2.6        beeswarm_0.4.0    pkgconfig_2.0.3   #> [37] desc_1.4.2        warp_0.2.0        pkgdown_2.0.7     pillar_1.9.0      #> [41] bslib_0.5.1       gtable_0.3.4      glue_1.6.2        systemfonts_1.0.5 #> [45] xfun_0.40         tibble_3.2.1      tidyselect_1.2.0  knitr_1.44        #> [49] farver_2.1.1      htmltools_0.5.6.1 rmarkdown_2.25    compiler_4.3.1"},{"path":"https://courtiol.github.io/lay/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexandre Courtiol. Author, maintainer. Romain François. Author.","code":""},{"path":"https://courtiol.github.io/lay/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Courtiol , François R (2023). Simple Efficient Rowwise Jobs. https://github.com/courtiol/lay.","code":"@Manual{,   title = {Simple but Efficient Rowwise Jobs},   author = {Alexandre Courtiol and Romain François},   year = {2023},   url = {https://github.com/courtiol/lay}, }"},{"path":[]},{"path":"https://courtiol.github.io/lay/index.html","id":"an-r-package-for-simple-but-efficient-rowwise-jobs","dir":"","previous_headings":"","what":"An R package for simple but efficient rowwise jobs","title":"Simple but Efficient Rowwise Jobs","text":"function lay() – function package {lay} – intended used apply function row data frame tibble, independently, across multiple columns containing values class (e.g. numeric). Implementing rowwise operations tabular data notoriously awkward R. Many options proposed, tend complicated, inefficient, . Instead lay() aims reaching sweet spot simplicity efficiency. function specifically designed combined functions {dplyr} feel part (can use lay() without {dplyr}). hardly code behind lay() (can coded 3 lines), package may just interim solution established package fulfills need… Time tell.","code":""},{"path":"https://courtiol.github.io/lay/index.html","id":"installation","dir":"","previous_headings":"An R package for simple but efficient rowwise jobs","what":"Installation","title":"Simple but Efficient Rowwise Jobs","text":"can install development version {lay} :","code":"remotes::install_github(\"courtiol/lay\")"},{"path":"https://courtiol.github.io/lay/index.html","id":"motivation","dir":"","previous_headings":"An R package for simple but efficient rowwise jobs","what":"Motivation","title":"Simple but Efficient Rowwise Jobs","text":"Consider following dataset, contains information use pain relievers non medical purpose. dataset tidy: row represents one individual variable forms column. Imagine now like know individual use pain relievers. proceed?","code":"library(lay)  ## requires to have installed {lay} drugs #> # A tibble: 100 × 8 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> #>  1 1            0       0       0       0       0       0       0 #>  2 2            0       0       0       0       0       0       0 #>  3 3            0       0       0       0       0       0       0 #>  4 4            0       0       0       0       0       0       0 #>  5 5            0       0       0       0       0       0       0 #>  6 6            0       0       0       0       0       0       0 #>  7 7            0       0       0       0       0       0       0 #>  8 8            0       0       0       0       0       0       0 #>  9 9            0       0       0       0       0       0       1 #> 10 10           0       0       0       0       0       0       0 #> # ℹ 90 more rows"},{"path":"https://courtiol.github.io/lay/index.html","id":"our-solution-lay","dir":"","previous_headings":"An R package for simple but efficient rowwise jobs","what":"Our solution: lay()","title":"Simple but Efficient Rowwise Jobs","text":"achieve goal using lay(): used mutate() {dplyr} create new column called everused, used pick() package remove column caseid laying row data applying function (). combining lay() {dplyr}, always use pick() across(). functions pick() across() let pick among many selection helpers package {tidyselect}, makes easy specify columns consider. function lay() quite flexible! example, can pass argument(s) function wish apply rowwise (()): Since one backbones lay() {rlang}, can use -called lambda syntax define anonymous functions fly: can also apply many functions , exemplified another dataset: Since backbone lay() {vctrs}, splicing happens automatically (unless output call used create named column). , last chunk code, three different columns (min, mean max) directly created. Important: using lay() function want use rowwise job must output scalar (vector length 1), tibble data frame single row. can apply function returns vector length > 1 turning vector tibble using as_tibble_row() {tibble}:","code":"library(dplyr, warn.conflicts = FALSE)  ## requires to have installed {dplyr}  drugs_full |>   mutate(everused = lay(pick(-caseid), any)) #> # A tibble: 55,271 × 9 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #>  1 1            0       0       0       0       0       0       0 FALSE    #>  2 2            0       0       0       0       0       0       0 FALSE    #>  3 3            0       0       0       0       0       0       0 FALSE    #>  4 4            0       0       0       0       0       0       0 FALSE    #>  5 5            0       0       0       0       0       0       0 FALSE    #>  6 6            0       0       0       0       0       0       0 FALSE    #>  7 7            0       0       0       0       0       0       0 FALSE    #>  8 8            0       0       0       0       0       0       0 FALSE    #>  9 9            0       0       0       0       0       0       1 TRUE     #> 10 10           0       0       0       0       0       0       0 FALSE    #> # ℹ 55,261 more rows drugs_with_NA <- drugs     ## create a copy of the dataset drugs_with_NA[1, 2] <- NA  ## introduce a missing value  drugs_with_NA |>   mutate(everused = lay(pick(-caseid), any)) |> ## without additional argument   slice(1)  ## keep first row only #> # A tibble: 1 × 9 #>   caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>   <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #> 1 1           NA       0       0       0       0       0       0 NA    drugs_with_NA |>   mutate(everused = lay(pick(-caseid), any, na.rm = TRUE)) |>  ## with additional argument   slice(1) #> # A tibble: 1 × 9 #>   caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>   <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #> 1 1           NA       0       0       0       0       0       0 FALSE drugs_with_NA |>  mutate(everused = lay(pick(-caseid), ~ any(.x, na.rm = TRUE))) ## same as above, different syntax #> # A tibble: 100 × 9 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor everused #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> <lgl>    #>  1 1           NA       0       0       0       0       0       0 FALSE    #>  2 2            0       0       0       0       0       0       0 FALSE    #>  3 3            0       0       0       0       0       0       0 FALSE    #>  4 4            0       0       0       0       0       0       0 FALSE    #>  5 5            0       0       0       0       0       0       0 FALSE    #>  6 6            0       0       0       0       0       0       0 FALSE    #>  7 7            0       0       0       0       0       0       0 FALSE    #>  8 8            0       0       0       0       0       0       0 FALSE    #>  9 9            0       0       0       0       0       0       1 TRUE     #> 10 10           0       0       0       0       0       0       0 FALSE    #> # ℹ 90 more rows data(\"world_bank_pop\", package = \"tidyr\")  ## requires to have installed {tidyr}  world_bank_pop |>   filter(indicator == \"SP.POP.TOTL\") |>   mutate(lay(pick(matches(\"\\\\d\")),              ~ tibble(min = min(.x), mean = mean(.x), max = max(.x))), .after = indicator) #> # A tibble: 266 × 23 #>    country indicator        min   mean    max `2000` `2001` `2002` `2003` `2004` #>    <chr>   <chr>          <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 ABW     SP.POP.TOTL   8.91e4 9.81e4 1.05e5 8.91e4 9.07e4 9.18e4 9.27e4 9.35e4 #>  2 AFE     SP.POP.TOTL   4.02e8 5.08e8 6.33e8 4.02e8 4.12e8 4.23e8 4.34e8 4.45e8 #>  3 AFG     SP.POP.TOTL   1.95e7 2.73e7 3.56e7 1.95e7 1.97e7 2.10e7 2.26e7 2.36e7 #>  4 AFW     SP.POP.TOTL   2.70e8 3.45e8 4.31e8 2.70e8 2.77e8 2.85e8 2.93e8 3.01e8 #>  5 AGO     SP.POP.TOTL   1.64e7 2.26e7 3.02e7 1.64e7 1.69e7 1.75e7 1.81e7 1.88e7 #>  6 ALB     SP.POP.TOTL   2.87e6 2.96e6 3.09e6 3.09e6 3.06e6 3.05e6 3.04e6 3.03e6 #>  7 AND     SP.POP.TOTL   6.61e4 7.32e4 8.02e4 6.61e4 6.78e4 7.08e4 7.39e4 7.69e4 #>  8 ARB     SP.POP.TOTL   2.87e8 3.52e8 4.24e8 2.87e8 2.94e8 3.00e8 3.07e8 3.13e8 #>  9 ARE     SP.POP.TOTL   3.28e6 6.58e6 9.07e6 3.28e6 3.45e6 3.63e6 3.81e6 3.99e6 #> 10 ARG     SP.POP.TOTL   3.71e7 4.05e7 4.40e7 3.71e7 3.75e7 3.79e7 3.83e7 3.87e7 #> # ℹ 256 more rows #> # ℹ 13 more variables: `2005` <dbl>, `2006` <dbl>, `2007` <dbl>, `2008` <dbl>, #> #   `2009` <dbl>, `2010` <dbl>, `2011` <dbl>, `2012` <dbl>, `2013` <dbl>, #> #   `2014` <dbl>, `2015` <dbl>, `2016` <dbl>, `2017` <dbl> world_bank_pop |>   filter(indicator == \"SP.POP.TOTL\") |>   mutate(lay(pick(matches(\"\\\\d\")),              ~ as_tibble_row(quantile(.x, na.rm = TRUE))), .after = indicator) #> # A tibble: 266 × 25 #>    country indicator       `0%`  `25%`  `50%`  `75%` `100%` `2000` `2001` `2002` #>    <chr>   <chr>          <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #>  1 ABW     SP.POP.TOTL   8.91e4 9.38e4 9.86e4 1.03e5 1.05e5 8.91e4 9.07e4 9.18e4 #>  2 AFE     SP.POP.TOTL   4.02e8 4.48e8 5.03e8 5.64e8 6.33e8 4.02e8 4.12e8 4.23e8 #>  3 AFG     SP.POP.TOTL   1.95e7 2.38e7 2.69e7 3.13e7 3.56e7 1.95e7 1.97e7 2.10e7 #>  4 AFW     SP.POP.TOTL   2.70e8 3.03e8 3.42e8 3.85e8 4.31e8 2.70e8 2.77e8 2.85e8 #>  5 AGO     SP.POP.TOTL   1.64e7 1.89e7 2.21e7 2.59e7 3.02e7 1.64e7 1.69e7 1.75e7 #>  6 ALB     SP.POP.TOTL   2.87e6 2.90e6 2.94e6 3.02e6 3.09e6 3.09e6 3.06e6 3.05e6 #>  7 AND     SP.POP.TOTL   6.61e4 7.11e4 7.21e4 7.55e4 8.02e4 6.61e4 6.78e4 7.08e4 #>  8 ARB     SP.POP.TOTL   2.87e8 3.15e8 3.51e8 3.87e8 4.24e8 2.87e8 2.94e8 3.00e8 #>  9 ARE     SP.POP.TOTL   3.28e6 4.07e6 7.49e6 8.73e6 9.07e6 3.28e6 3.45e6 3.63e6 #> 10 ARG     SP.POP.TOTL   3.71e7 3.88e7 4.05e7 4.21e7 4.40e7 3.71e7 3.75e7 3.79e7 #> # ℹ 256 more rows #> # ℹ 15 more variables: `2003` <dbl>, `2004` <dbl>, `2005` <dbl>, `2006` <dbl>, #> #   `2007` <dbl>, `2008` <dbl>, `2009` <dbl>, `2010` <dbl>, `2011` <dbl>, #> #   `2012` <dbl>, `2013` <dbl>, `2014` <dbl>, `2015` <dbl>, `2016` <dbl>, #> #   `2017` <dbl>"},{"path":"https://courtiol.github.io/lay/index.html","id":"history","dir":"","previous_headings":"An R package for simple but efficient rowwise jobs","what":"History","title":"Simple but Efficient Rowwise Jobs","text":"first draft package created @romainfrancois reply tweet (Alexandre Courtiol) posted @rdataberlin February 2020. time exploring different ways perform rowwise jobs R experimenting various ideas exploit fact newly introduced function across() {dplyr} creates tibbles one can easily apply function. Romain came lay() better solution, making good use {rlang} & {vctrs}. verb lay() never made integrated within {dplyr}, , far, still find lay() superior alternatives, decided document maintain package.","code":""},{"path":"https://courtiol.github.io/lay/reference/drugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Pain relievers misuse in the US — drugs","title":"Pain relievers misuse in the US — drugs","text":"Datasets containing information use pain relievers non medical purpose.","code":""},{"path":"https://courtiol.github.io/lay/reference/drugs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pain relievers misuse in the US — drugs","text":"tibble either 100 55271 rows, 8 variables: caseid identifier code respondent hydrocd Ever use hydrocodone nonmedically? oxycodp Ever use ever percocet, percodan, tylox, oxycontin... nonmedically? codeine Ever used codeine nonmedically? tramadl Ever used tramadol nonmedically? morphin Ever used morphine nonmedically? methdon Ever used methadone nonmedically? vicolor Ever used vicodin, lortab lorcert nonmedically?","code":""},{"path":"https://courtiol.github.io/lay/reference/drugs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pain relievers misuse in the US — drugs","text":"https://www.icpsr.umich.edu/web/NAHDAP/studies/36361","code":""},{"path":"https://courtiol.github.io/lay/reference/drugs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pain relievers misuse in the US — drugs","text":"datasets small subset \"National Survey Drug Use Health, 2014\". variables related drug use recoded vectors integers talking value 0 \"/Unknown\" value 1 \"Yes\". original variable names defined upper case ending number 2. dataset called drugs contain first 100 rows one called drugs_full.","code":""},{"path":"https://courtiol.github.io/lay/reference/drugs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pain relievers misuse in the US — drugs","text":"United States Department Health Human Services. Substance Abuse Mental Health Services Administration. Center Behavioral Health Statistics Quality. National Survey Drug Use Health, 2014. Ann Arbor, MI: Inter-university Consortium Political Social Research (distributor), 2016-03-22. doi:10.3886/ICPSR36361.v1","code":""},{"path":"https://courtiol.github.io/lay/reference/drugs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pain relievers misuse in the US — drugs","text":"","code":"drugs #> # A tibble: 100 × 8 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> #>  1 1            0       0       0       0       0       0       0 #>  2 2            0       0       0       0       0       0       0 #>  3 3            0       0       0       0       0       0       0 #>  4 4            0       0       0       0       0       0       0 #>  5 5            0       0       0       0       0       0       0 #>  6 6            0       0       0       0       0       0       0 #>  7 7            0       0       0       0       0       0       0 #>  8 8            0       0       0       0       0       0       0 #>  9 9            0       0       0       0       0       0       1 #> 10 10           0       0       0       0       0       0       0 #> # ℹ 90 more rows drugs_full #> # A tibble: 55,271 × 8 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> #>  1 1            0       0       0       0       0       0       0 #>  2 2            0       0       0       0       0       0       0 #>  3 3            0       0       0       0       0       0       0 #>  4 4            0       0       0       0       0       0       0 #>  5 5            0       0       0       0       0       0       0 #>  6 6            0       0       0       0       0       0       0 #>  7 7            0       0       0       0       0       0       0 #>  8 8            0       0       0       0       0       0       0 #>  9 9            0       0       0       0       0       0       1 #> 10 10           0       0       0       0       0       0       0 #> # ℹ 55,261 more rows"},{"path":"https://courtiol.github.io/lay/reference/lay.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function within each row — lay","title":"Apply a function within each row — lay","text":"Create efficiently new column(s) data frame (including tibble) applying function one row time.","code":""},{"path":"https://courtiol.github.io/lay/reference/lay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function within each row — lay","text":"","code":"lay(.data, .fn, ..., .method = c(\"apply\", \"tidy\"))"},{"path":"https://courtiol.github.io/lay/reference/lay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function within each row — lay","text":".data data frame tibble (data frame extensions). .fn function apply row .data. Possible values : function, e.g. mean anonymous function, .e.g. function(x) mean(x, na.rm = TRUE) anonymous function shorthand, .e.g. \\(x) mean(x, na.rm = TRUE) purrr-style lambda, e.g. ~ mean(.x, na.rm = TRUE) (wrap output data frame apply several functions , e.g. ~ tibble(min = min(.x), max = max(.x))) ... Additional arguments function calls .fn (must named!). .method experimental argument allows control internal method used apply rowwise job: \"apply\", default internally uses function apply(). \"tidy\", internally uses purrr::pmap() stricter respect class coercion across columns. default chosen based benchmarks.","code":""},{"path":"https://courtiol.github.io/lay/reference/lay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function within each row — lay","text":"lay() create vector data frame (tibble), considering turns row data frame (.data) vector input function(s) .fn. makes creation new columns based rowwise operation simple (see Examples; ) efficient (see Article benchmarks). function fully compatible {dplyr}-based workflows follows syntax close dplyr::across(). Yet, takes .data instead .cols main argument, makes possible also use lay() outside dplyr verbs (see Examples). function lay() work wide range situations, provided : input .data data frame (including tibble) columns class, classes similar enough easily coerced single class. Note .method = \"apply\" also allows input matrix permissive terms data coercion. output .fn scalar (.e., vector length 1) 1 row data frame (tibble). use lay() within dplyr::mutate(), make sure data used dplyr::mutate() contain row-grouping, .e., passed .data dplyr::mutate() class grouped_df rowwise_df. , lay() called multiple times, slow computation despite influencing output.","code":""},{"path":"https://courtiol.github.io/lay/reference/lay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function within each row — lay","text":"","code":"# usage without dplyr -------------------------------------------------------------------------  # lay can return a vector lay(drugs[1:10, -1], any) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  # lay can return a data frame ## using the shorthand function syntax \\(x) .fn(x) lay(drugs[1:10, -1],    \\(x) data.frame(drugs_taken = sum(x), drugs_not_taken = sum(x == 0))) #>    drugs_taken drugs_not_taken #> 1            0               7 #> 2            0               7 #> 3            0               7 #> 4            0               7 #> 5            0               7 #> 6            0               7 #> 7            0               7 #> 8            0               7 #> 9            1               6 #> 10           0               7  ## using the rlang lambda syntax ~ fn(.x) lay(drugs[1:10, -1],    ~ data.frame(drugs_taken = sum(.x), drugs_not_taken = sum(.x == 0))) #>    drugs_taken drugs_not_taken #> 1            0               7 #> 2            0               7 #> 3            0               7 #> 4            0               7 #> 5            0               7 #> 6            0               7 #> 7            0               7 #> 8            0               7 #> 9            1               6 #> 10           0               7  # lay can be used to augment a data frame cbind(drugs[1:10, ],       lay(drugs[1:10, -1],          ~ data.frame(drugs_taken = sum(.x), drugs_not_taken = sum(.x == 0)))) #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor drugs_taken #> 1       1       0       0       0       0       0       0       0           0 #> 2       2       0       0       0       0       0       0       0           0 #> 3       3       0       0       0       0       0       0       0           0 #> 4       4       0       0       0       0       0       0       0           0 #> 5       5       0       0       0       0       0       0       0           0 #> 6       6       0       0       0       0       0       0       0           0 #> 7       7       0       0       0       0       0       0       0           0 #> 8       8       0       0       0       0       0       0       0           0 #> 9       9       0       0       0       0       0       0       1           1 #> 10     10       0       0       0       0       0       0       0           0 #>    drugs_not_taken #> 1                7 #> 2                7 #> 3                7 #> 4                7 #> 5                7 #> 6                7 #> 7                7 #> 8                7 #> 9                6 #> 10               7   # usage with dplyr ----------------------------------------------------------------------------  if (require(\"dplyr\")) {    # apply any() to each row   drugs |>     mutate(everused = lay(pick(-caseid), any))    # apply any() to each row using all columns   drugs |>     select(-caseid) |>     mutate(everused = lay(pick(everything()), any))    # a workaround would be to use `rowSums`   drugs |>     mutate(everused = rowSums(pick(-caseid)) > 0)    # but we can lay any function taking a vector as input, e.g. median   drugs |>     mutate(used_median = lay(pick(-caseid), median))    # you can pass arguments to the function   drugs_with_NA <- drugs   drugs_with_NA[1, 2] <- NA    drugs_with_NA |>     mutate(everused = lay(pick(-caseid), any))   drugs_with_NA |>     mutate(everused = lay(pick(-caseid), any, na.rm = TRUE))    # you can lay the output into a 1-row tibble (or data.frame)   # if you want to apply multiple functions   drugs |>     mutate(lay(pick(-caseid),              ~ tibble(drugs_taken = sum(.x), drugs_not_taken = sum(.x == 0))))    # note that naming the output prevent the automatic splicing and you obtain a df-column   drugs |>     mutate(usage = lay(pick(-caseid),               ~ tibble(drugs_taken = sum(.x), drugs_not_taken = sum(.x == 0))))    # if your function returns a vector longer than a scalar, you should turn the output   # into a tibble, which is the job of as_tibble_row()   drugs |>     mutate(lay(pick(-caseid), ~ as_tibble_row(quantile(.x))))    # note that you could also wrap the output in a list and name it to obtain a list-column   drugs |>     mutate(usage_quantiles = lay(pick(-caseid), ~ list(quantile(.x)))) } #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> # A tibble: 100 × 9 #>    caseid hydrocd oxycodp codeine tramadl morphin methdon vicolor #>    <chr>    <int>   <int>   <int>   <int>   <int>   <int>   <int> #>  1 1            0       0       0       0       0       0       0 #>  2 2            0       0       0       0       0       0       0 #>  3 3            0       0       0       0       0       0       0 #>  4 4            0       0       0       0       0       0       0 #>  5 5            0       0       0       0       0       0       0 #>  6 6            0       0       0       0       0       0       0 #>  7 7            0       0       0       0       0       0       0 #>  8 8            0       0       0       0       0       0       0 #>  9 9            0       0       0       0       0       0       1 #> 10 10           0       0       0       0       0       0       0 #> # ℹ 90 more rows #> # ℹ 1 more variable: usage_quantiles <list>"},{"path":"https://courtiol.github.io/lay/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tibble as_tibble_row, tibble","code":""}]
